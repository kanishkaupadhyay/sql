-- Create a database

    CREATE DATABASE ig_clone;

-- Users TABLE

    CREATE TABLE users
    (
        id INTEGER AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(255) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT NOW()
    );

-- Photos TABLE

    CREATE TABLE photos
    (
        id INTEGER AUTO_INCREMENT PRIMARY KEY,
        image_url VARCHAR(255) NOT NULL,
        user_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        FOREIGN KEY (user_id) REFERENCES users (id)
    );

-- Comments TABLE

    CREATE TABLE comments
    (
        id INTEGER AUTO_INCREMENT PRIMARY KEY,
        comment_text VARCHAR(255) NOT NULL,
        user_id INTEGER NOT NULL,
        photo_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (photo_id) REFERENCES photos (id)
    );

-- Likes TABLE

    CREATE TABLE likes 
    (
        user_id INTEGER NOT NULL,
        photo_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        FOREIGN KEY (user_id) REFERENCES user (id),
        FOREIGN KEY (photo_id) REFERENCES photos (id),
        PRIMARY KEY (user_id, photo_id)
    );

-- Follows TABLE

    CREATE TABLE follows 
    (
        follower_id INTEGER NOT NULL,
        followee_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        FOREIGN KEY (follower_id) REFERENCES user (id),
        FOREIGN KEY (followee_id) REFERENCES user (id),
        PRIMARY KEY (follower_id, follower_id)
    );

-- Tags TABLE

    CREATE TABLE tags 
    (
        id AUTO_INCREMENT PRIMARY KEY,
        tag_name VARCHARL(255) NOT NULL, 
        created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE TABLE photo_tags
    (
        photo_id INTEGER NOT NULL,
        tag_id INTEGER NOT NULL,
        FOREIGN KEY (photo_id) REFERENCES photos(id),
        FOREIGN KEY (tag_id) REFERENCES tags(id),
        PRIMARY KEY(photo_id, tag_id)
    );